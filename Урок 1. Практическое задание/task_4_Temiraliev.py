"""
Задание 4.
Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему
Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.
Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.
Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

# Хранилище словарь - {логин: [пароль, активация(0-1)]} (если уч запись активирована 1, если нет - 0)

users_dict = {'alex': [12345, 1], 'andrey': [32228, 0], 'nina': [123123, 1], 'anton': [92341, 0]}

#  Способ 1  # O(N)


def users_activation(login):
    if login in list(users_dict.keys()):  # O(N)
        if users_dict[login][1] == 1:  # O(1)
            print('Welcome')  # O(1)
        elif users_dict[login][1] == 0:  # O(1)
            print('Учетная запись не активирована.\n Хотите активировать сейчас?')  # O(1)
    else:
        print('Нет пользователя с таким логином')  # O(1)


users_activation('rey')  # проверка


# Способ 2 O(1)

def users_activation_2(login):

    if login in users_dict:  # O(1)
        if users_dict[login][1] == 1:  # O(1)
            print('Welcome')  # O(1)
        elif users_dict[login][1] == 0:  # O(1)
            print('Учетная запись не активирована.\n Хотите активировать сейчас?')  # O(1)
    else:
        print('Нет пользователя с таким логином')  # O(1)


users_activation('andrey')  # проверка

#  Эффективнее второй способ, т.к. сложность O(1) < O(N)