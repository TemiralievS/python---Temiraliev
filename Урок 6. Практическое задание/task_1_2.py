"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.
ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
"""

# Алгоритмы. 4 урок. Задание 1.

from memory_profiler import memory_usage
from numpy import array


def decor_memory(func):
    def wrapper(*args):
        m1 = memory_usage()
        func(*args)
        m2 = memory_usage()
        print(f'memory - {m2[0] - m1[0]}')
    return wrapper


arr = [i for i in range(100000)]


# До оптимизации


@decor_memory
def new_func(nums: list):
    new_arr = [i for i in range(len(nums)) if nums[i] % 2 == 0]
    return new_arr


new_func(arr)


# После оптимизации


@decor_memory
def add_array(nums):
    new_arr = array([i for i in range(100000) if nums[i] % 2 == 0])
    return new_arr


add_array(arr)
"""
Занимаемая память - 0.12890625 при использовании обычного спискового включения
Занимаемая память - 0.02390625 при использовании array

Согласно замерам при переходе от обычного спискового включения к array
объем занимаемой памяти уменьшился в 5.4 раза 
"""

